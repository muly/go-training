

## client server architecture



## RESTful API standard



### request response lifecycle 

### how client request is routed to our specific code
http://www.steves-internet-guide.com/wp-content/uploads/TCP-IP-ports-sockets.jpg

TODO: need to prepare slides from the svg files in ./request-flow folder


what is multiplexer. 
the multiplexer in Golang is some things like multiplexer in hardware which multiply some inputs into some outputs
TODO: need to add more notes

## api server programming using net/http package





1. hello world: handler registration and host and port registration
/helloworld.go
2. request and response anatomy: how to access them

    handler func signature: https://pkg.go.dev/net/http#HandlerFunc
        func(ResponseWriter, *Request)

    request struct: https://pkg.go.dev/net/http#Request
    response writer struct: https://pkg.go.dev/net/http#ResponseWriter

3. with multiple handlers 
/server.go 


## api server programming using gorilla mux package
### why we need a different package when we already have net/http
TODO: need to explain (with a program using net/http) how untidy it will be if we need to have different handlers for each http method under the same URI.

### more TODO
1. hello world: how this is different from that of net/http program. 
introduction of non-default multiplexer
2. separate handler for each METHOD
3. how to read the below:
- query parameters
- headers
- request body
4. how to set the below:
- headers
- status code
- response body

## api server programming using other 3rd party packages



## api client programming using net/http package