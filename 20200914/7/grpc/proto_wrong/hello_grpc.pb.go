// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	Send(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

var helloSendStreamDesc = &grpc.StreamDesc{
	StreamName: "Send",
}

func (c *helloClient) Send(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/hello.Hello/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloService is the service API for Hello service.
// Fields should be assigned to their respective handler implementations only before
// RegisterHelloService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type HelloService struct {
	Send func(context.Context, *HelloMessage) (*HelloMessage, error)
}

func (s *HelloService) send(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/hello.Hello/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Send(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterHelloService registers a service implementation with a gRPC server.
func RegisterHelloService(s grpc.ServiceRegistrar, srv *HelloService) {
	srvCopy := *srv
	if srvCopy.Send == nil {
		srvCopy.Send = func(context.Context, *HelloMessage) (*HelloMessage, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "hello.Hello",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Send",
				Handler:    srvCopy.send,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "hello.proto",
	}

	s.RegisterService(&sd, nil)
}
