# interface

////////////////////////////////////////////////////////////////////////
## what is an interface
- abstraction of functionality
- describes "what" but not "how"
- describes the methods' signature but not the implementation/body

: interface describes "what" but not "how" part of the functionality. it is up to the implementor of the interface to describe "how" part.



## real life examples
- usb type c port
- standard power outlet
- ATM machine



## interface syntax

    type <interface name> interface{
        <method-signature>
        ........
    }



## interface example

    type shape interface {
        area() float32
        perimeter() float32
    }

////////////////////////////////////////////////////////////////////////
## implementing an interface 
**basic interface implementation example**

.play -numbers _concepts/09_interfaces/00a.go /START OMIT/,/END OMIT/

## implementing an interface 
**basic interface implementation example**

continued... 

.play -numbers _concepts/09_interfaces/00aCopy.go /START OMIT/,/END OMIT/
: we declare the variable of type interface, but initialize it with a concrete type that implements the interface

: square implements shape interface, because square has the area() and perimeter() methods implemented (with the same signature as in the interface definition).

////////////////////////////////////////////////////////////////////////
## implementing an interface 
**interface implementation must be done by a user defined types**

: we cannot use built-in types to implement an interface, because we cannot add methods on a system type like string
: the code in this example attempts to implement an interface by a built-in type

.play -numbers _concepts/09_interfaces/00b.go /START OMIT/,/END OMIT/

////////////////////////////////////////////////////////////////////////
## implementing an interface 
**user defined type implementing an interface must have all the methods defined by the interface**

.play -numbers _concepts/09_interfaces/00d.go /START OMIT/,/END OMIT/


////////////////////////////////////////////////////////////////////////
## implementing an interface 
**a user defined type implementing an interface can have extra methods other than those defined by the interface**

: in this example the type square have an extra method called `getColor()` which is not part of the interface definition

.play -numbers _concepts/09_interfaces/00c.go /START OMIT/,/END OMIT/

## implementing an interface 
**a user defined type implementing an interface can have extra methods other than those defined by the interface**

continued... 

.play -numbers _concepts/09_interfaces/00cCopy.go /START OMIT/,/END OMIT/



////////////////////////////////////////////////////////////////////////
## implementing an interface 
, 00e.go => 01.go

// // an type can be implement more than one interface
02.go

## interface values

## single method interfaces
    significance

## single method interfaces
    example in standard library
        stringer
        error

## empty interface
- empty interface
- function with a parameter of type empty interface

## type assertions

## type switch

