# interface

////////////////////////////////////////////////////////////////////////////////////
## what is an interface
- abstraction of functionality
- describes "what" but not "how"
- describes the methods' signature but not the implementation/body

: interface describes "what" but not "how" part of the functionality. it is up to the implementor of the interface to describe "how" part.

## real life examples
- usb type c port
- standard power outlet
- ATM machine

## interface syntax

    type <interface name> interface{
        <method-signature>
        ........
    }

## interface example

    type shape interface {
        area() float32
        perimeter() float32
    }

## implementing an interface 
**basic interface implementation example**

.play -numbers _concepts/09_interfaces/00a1.go /START OMIT/,/END OMIT/

## implementing an interface 
**basic interface implementation example**

.play -numbers _concepts/09_interfaces/00a1copy.go /START OMIT/,/END OMIT/

: we declare the variable of type interface, but initialize it with a concrete type that implements the interface

## implementing an interface 
**interface implementation must be done by a user defined types**

: we cannot use built-in types to implement an interface, because we cannot add methods on a system type like string
: the code in this example attempts to implement an interface by a built-in type

.play -numbers _concepts/09_interfaces/00b.go /START OMIT/,/END OMIT/



## implementing an interface 
00b.go, 00c.go, 00d.go, 00e.go => 01.go

// // an type can be implement more than one interface
02.go

## interface values

## single method interfaces
    significance

## single method interfaces
    example in standard library
        stringer
        error

## empty interface
- empty interface
- function with a parameter of type empty interface

## type assertions

## type switch

