// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CustomerDataClient is the client API for CustomerData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerDataClient interface {
	Insert(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customers, error)
}

type customerDataClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerDataClient(cc grpc.ClientConnInterface) CustomerDataClient {
	return &customerDataClient{cc}
}

var customerDataInsertStreamDesc = &grpc.StreamDesc{
	StreamName: "Insert",
}

func (c *customerDataClient) Insert(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/customer.CustomerData/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var customerDataGetAllStreamDesc = &grpc.StreamDesc{
	StreamName: "GetAll",
}

func (c *customerDataClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Customers, error) {
	out := new(Customers)
	err := c.cc.Invoke(ctx, "/customer.CustomerData/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerDataService is the service API for CustomerData service.
// Fields should be assigned to their respective handler implementations only before
// RegisterCustomerDataService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type CustomerDataService struct {
	Insert func(context.Context, *Customer) (*Customer, error)
	GetAll func(context.Context, *empty.Empty) (*Customers, error)
}

func (s *CustomerDataService) insert(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/customer.CustomerData/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Insert(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *CustomerDataService) getAll(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/customer.CustomerData/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCustomerDataService registers a service implementation with a gRPC server.
func RegisterCustomerDataService(s grpc.ServiceRegistrar, srv *CustomerDataService) {
	srvCopy := *srv
	if srvCopy.Insert == nil {
		srvCopy.Insert = func(context.Context, *Customer) (*Customer, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
		}
	}
	if srvCopy.GetAll == nil {
		srvCopy.GetAll = func(context.Context, *empty.Empty) (*Customers, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "customer.CustomerData",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Insert",
				Handler:    srvCopy.insert,
			},
			{
				MethodName: "GetAll",
				Handler:    srvCopy.getAll,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/customer.proto",
	}

	s.RegisterService(&sd, nil)
}
