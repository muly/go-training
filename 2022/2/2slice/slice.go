//
package main

import "fmt"

func main() {



	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	

	
		
	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	{ 
	
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// // growing a slice beyond it capacity: cap, append, slice is pointer
	// 
	{ // capacity of a slice: growing beyond:
		// TODO:
		// Note: while explaining this topic, I need to add references to address of the underlying array
		// and how it changes when we grow a slice beyond its current capacity.
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// copy() system function
	{ // copy() internal function: TODO:
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	{ // delete an entry in slice: no direct function, we need to stitch the two slices, while ignoring the element that needs to be deleted.
		var a = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
		fmt.Println(a)
		a = append(a[:4], a[5:]...)
		fmt.Println(a, len(a), cap(a))
	}

}
